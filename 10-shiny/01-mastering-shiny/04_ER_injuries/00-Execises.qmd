---
title: "4. ER injuries"
---

```{r}
#| include: false

knitr::opts_chunk$set(
  message = FALSE,
  fig.width = 8,
  fig.height = 4,
  fig.align = "center",
  dpi = 300
)
```


## Loading libraries

```{r}
library(shiny)
library(tidyverse)
theme_set(theme_light())
```

## Importing data

```{r}
folder_path <- here::here("01-mastering-shiny/04_ER_injuries/neiss/")

injuries <- vroom::vroom(file.path(folder_path, "injuries.tsv.gz"))
products <- vroom::vroom(file.path(folder_path, "products.tsv"))
population <- vroom::vroom(file.path(folder_path, "population.tsv"))
```

## Exploration

```{r}
injuries_toilet <- injuries |> filter(prod_code == 649)
```

- **Where can we experiment accidents related with toilets?**

```{r}
injuries_toilet |>
  count(location, wt = weight, sort = TRUE)
```

- **What body part is affected?**

```{r}
injuries_toilet|>
  count(body_part, wt = weight, sort = TRUE)
```

- **What is the final diagnosis?**

```{r}
injuries_toilet |>
  count(diag, wt = weight, sort = TRUE) |>
  head()
```

- **How many people have suffer from this result by sex and age?**

  - **Totals**
  
```{r}
injuries_toilet |>
  count(age, sex, wt = weight, sort = TRUE) |>
  ggplot(aes(age, n, colour = sex)) +
  geom_line() +
  labs(y = "Estimated number of injuries")
```

  - **Injure rate by 10,000 people**
  
```{r}
injuries_toilet |>
  count(age, sex, wt = weight, sort = TRUE) |>
  left_join(population, by = c("age", "sex")) |>
  mutate(rate = n / population * 1e4) |>
  ggplot(aes(age, rate, colour = sex)) +
  geom_line(na.rm = TRUE) +
  labs(y = "Injuries per 10,000 people")
```

  - **What can we learn from narratives?**

```{r}
set.seed(125)

injuries_toilet |>
  filter(str_length(narrative) < 100) |>
  sample_n(5) |>
  pull(narrative)

set.seed(NULL)
```

## Prototype

Once we know what we need:

- Input
  - Product code
  
- Output
 - 1 Plot
 - 3 Tables

We can create a **pencil-and-paper sketch** and define the **reactive graph** before start coding.

### Step 1: Placing base information

```{r}
#| eval: false
prod_codes <- setNames(products$prod_code, products$title)

ui <- fluidPage(
  fluidRow(
    column(6,
      selectInput("code", "Product", choices = prod_codes)
    )
  ),
  fluidRow(
    column(4, tableOutput("diag_tb")),
    column(4, tableOutput("body_part_tb")),
    column(4, tableOutput("location_tb"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex_plot"))
  )
)

server <- function(input, output, session) {
  
  injuries_selected <- reactive({
    injuries |> filter(prod_code == input$code)
  })
  
  output$diag_tb <- renderTable({
    injuries_selected() |>
      count(diag, wt = weight, sort = TRUE)
  })
  
  output$body_part_tb <- renderTable({
    injuries_selected() |>
      count(body_part, wt = weight, sort = TRUE)
  })
  
  output$location_tb <- renderTable({
    injuries_selected() |>
      count(location, wt = weight, sort = TRUE)
  })
  
  # Just to keep computing and plotting separate
  age_sex_count <- reactive({
    injuries_selected() |>
      count(age, sex, wt = weight, sort = TRUE)
  })
  
  
  output$age_sex_plot <- renderPlot({
    age_sex_count() |>
      ggplot(aes(age, n, colour = sex)) +
      geom_line(na.rm = TRUE) +
      labs(y = "Estimated number of injuries")
  }, res = 96)
    
}

shinyApp(ui, server)
```

![](img/01-prototype.png)

### Step 2: Polish tables


```{r}
#| eval: false

count_top <- function(df, var, n = 5) {
  df |>
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) |>
    group_by({{ var }}) |>
    summarise(n = as.integer(sum(weight)))
}

prod_codes <- setNames(products$prod_code, products$title)

ui <- fluidPage(
  fluidRow(
    column(6,
      selectInput("code", "Product", choices = prod_codes)
    )
  ),
  fluidRow(
    column(4, tableOutput("diag_tb")),
    column(4, tableOutput("body_part_tb")),
    column(4, tableOutput("location_tb"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex_plot"))
  )
)

server <- function(input, output, session) {
  
  injuries_selected <- reactive({
    injuries |> filter(prod_code == input$code)
  })
  
  output$diag_tb <- renderTable(
    count_top(injuries_selected(), diag),
    width = "100%"
  )
  
  output$body_part_tb <- renderTable(
    count_top(injuries_selected(), body_part),
    width = "100%"
  )
  
  output$location_tb <- renderTable(
    count_top(injuries_selected(), location),
    width = "100%"
  )
  
  # Just to keep computing and plotting separate
  age_sex_count <- reactive({
    injuries_selected() |>
      count(age, sex, wt = weight, sort = TRUE)
  })
  
  
  output$age_sex_plot <- renderPlot({
    age_sex_count() |>
      ggplot(aes(age, n, colour = sex)) +
      geom_line(na.rm = TRUE) +
      labs(y = "Estimated number of injuries")
  }, res = 96)
    
}

shinyApp(ui, server)
```

![](img/02-prototype.png)

### Step 3: Rate vs count

```{r}
#| eval: false

count_top <- function(df, var, n = 5) {
  df |>
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) |>
    group_by({{ var }}) |>
    summarise(n = as.integer(sum(weight)))
}

prod_codes <- setNames(products$prod_code, products$title)

ui <- fluidPage(
  fluidRow(
    column(8,
      selectInput("code", "Product",
        choices = setNames(products$prod_code, products$title),
        width = "100%"
      )
    ),
    column(2, selectInput("metric", "Y axis", c("rate", "count")))
  ),
  fluidRow(
    column(4, tableOutput("diag_tb")),
    column(4, tableOutput("body_part_tb")),
    column(4, tableOutput("location_tb"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex_plot"))
  )
)

server <- function(input, output, session) {
  
  injuries_selected <- reactive({
    injuries |> filter(prod_code == input$code)
  })
  
  output$diag_tb <- renderTable(
    count_top(injuries_selected(), diag),
    width = "100%"
  )
  
  output$body_part_tb <- renderTable(
    count_top(injuries_selected(), body_part),
    width = "100%"
  )
  
  output$location_tb <- renderTable(
    count_top(injuries_selected(), location),
    width = "100%"
  )
  
  # Now if the we change from count to rate
  # shiny doesn't need to update this part
  # just to update the plot
  age_sex_summary <- reactive({
    injuries_selected() |>
      count(age, sex, wt = weight, sort = TRUE) |>
      left_join(population, by = c("age", "sex")) |>
      mutate(rate = n / population * 1e4)
  })
  
  
  output$age_sex_plot <- renderPlot({
    if (input$metric == "count") {
      age_sex_summary() |>
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries")
    } else {
      age_sex_summary() |>
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people")
    }
  }, res = 96)
    
}

shinyApp(ui, server)
```

![](img/03-prototype.png)


### Step 4: Narrative

```{r}
#| eval: false

count_top <- function(df, var, n = 5) {
  df |>
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) |>
    group_by({{ var }}) |>
    summarise(n = as.integer(sum(weight)))
}

prod_codes <- setNames(products$prod_code, products$title)

ui <- fluidPage(
  fluidRow(
    column(8,
      selectInput("code", "Product",
        choices = setNames(products$prod_code, products$title),
        width = "100%"
      )
    ),
    column(2, selectInput("metric", "Y axis", c("rate", "count")))
  ),
  fluidRow(
    column(4, tableOutput("diag_tb")),
    column(4, tableOutput("body_part_tb")),
    column(4, tableOutput("location_tb"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex_plot"))
  ),
  fluidRow(
    column(2, actionButton("story", "Tell me a story")),
    column(10, textOutput("narrative"))
  )
)

server <- function(input, output, session) {
  
  injuries_selected <- reactive({
    injuries |> filter(prod_code == input$code)
  })
  
  output$diag_tb <- renderTable(
    count_top(injuries_selected(), diag),
    width = "100%"
  )
  
  output$body_part_tb <- renderTable(
    count_top(injuries_selected(), body_part),
    width = "100%"
  )
  
  output$location_tb <- renderTable(
    count_top(injuries_selected(), location),
    width = "100%"
  )
  
  # Now if the we change from count to rate
  # shiny doesn't need to update this part
  # just to update the plot
  age_sex_summary <- reactive({
    injuries_selected() |>
      count(age, sex, wt = weight, sort = TRUE) |>
      left_join(population, by = c("age", "sex")) |>
      mutate(rate = n / population * 1e4)
  })
  
  
  output$age_sex_plot <- renderPlot({
    if (input$metric == "count") {
      age_sex_summary() |>
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries")
    } else {
      age_sex_summary() |>
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people")
    }
  }, res = 96)
  
  
  narrative_sample <- eventReactive(
    # Re-evaluated whenever either input$story or selected() changes
    list(input$story, injuries_selected()),
    # Text to show
    injuries_selected() |> pull(narrative) |> sample(1)
  )
  
  output$narrative <- renderText(narrative_sample())
    
}

shinyApp(ui, server)
```

![](img/04-prototype.png)


## Exercises

1. Draw the reactive graph for each app.

**Step 1 and 2: Placing base information and Polish tables**

```{r}
#| message: false
#| warning: false
#| echo: false
#| eval: false

DiagrammeR::grViz("
digraph step_1 {

  # General properties
  graph [rankdir = LR, fontsize = 10, overlap = true]

  # Defining input nodes
  node [shape = cds,
        fontname = Helvetica,
        rank = 1]
  x1[label='code']
  
  subgraph {
  rank = same; x1
  }
  
  
  # Defining Reactive Expressions
  node [shape = box,
        fontname = Helvetica,
        height = 0.15]
  y1[label='injuries_selected()']
  y2[label='age_sex_count()']
  y3[label='']

  # Defining output
  node [shape = ellipse]
  z1[label='diag_tb']
  z2[label='body_part_tb']
  z3[label='location_tb']
  z4[label='age_sex_plot']
  
  subgraph {
  rank = same; z1, z2, z3, z4
  }

  # several 'edge' statements
  x1 -> y1
  y1 -> y2
  y1 -> {z1, z2, z3}
  y2 -> z4
}
")
```

![](img/01-prototype-graph.png)

**Step 3: Rate vs count**

```{r}
#| message: false
#| warning: false
#| echo: false
#| eval: false

DiagrammeR::grViz("
digraph step_1 {

  # General properties
  graph [rankdir = LR, fontsize = 10, overlap = true]

  # Defining input nodes
  node [shape = cds,
        fontname = Helvetica,
        rank = 1]
  x1[label='code']
  x2[label='metric']
  
  subgraph {
  rank = same; x1; x2
  }
  
  
  # Defining Reactive Expressions
  node [shape = box,
        fontname = Helvetica,
        height = 0.15]
  y1[label='injuries_selected()']
  y2[label='age_sex_summary()']


  # Defining output
  node [shape = ellipse]
  z1[label='diag_tb']
  z2[label='body_part_tb']
  z3[label='location_tb']
  z4[label='age_sex_plot']
  
  subgraph {
  rank = same; z1, z2, z3, z4
  }

  # several 'edge' statements
  x1 -> y1
  x2 -> z4
  y1 -> y2
  y1 -> {z1, z2, z3}
  y2 -> z4
}
")
```

![](img/03-prototype-graph.png)


**Step 4: Narrative**

```{r}
#| message: false
#| warning: false
#| echo: false
#| eval: false

DiagrammeR::grViz("
digraph step_1 {

  # General properties
  graph [rankdir = LR, fontsize = 10, overlap = true]

  # Defining input nodes
  node [shape = cds,
        fontname = Helvetica,
        rank = 1]
  x1[label='code']
  x2[label='metric']
  x3[label='story']
  
  subgraph {
  rank = same; x1; x2; x3
  }
  
  
  # Defining Reactive Expressions
  node [shape = box,
        fontname = Helvetica,
        height = 0.15,
        rank = 2]
  y1[label='injuries_selected()']

  subgraph {
  rank = same; y1
  }
  
  node [rank = 3]
  y2[label='age_sex_summary()']
  y3[label='narrative_sample()']
  
  subgraph {
  rank = same; y3; y2
  }

  # Defining output
  node [shape = ellipse, rank = 4]
  z1[label='diag_tb']
  z2[label='body_part_tb']
  z3[label='location_tb']
  z4[label='age_sex_plot']
  z5[label='narrative']
  
  subgraph {
  rank = same; z1, z2, z3, z4; z5
  }

  # several 'edge' statements
  x1 -> y1
  x2 -> z4
  y1 -> y2
  y1 -> {z1, z2, z3}
  y2 -> z4
  {x3, y1} -> y3
  y3 -> z5
}
")
```

![](img/04-prototype-graph.png)

2. What happens if you flip fct_infreq() and fct_lump() in the code that reduces the summary tables?

The table results were affected as the `other` level isn't any more the last one and was assigned based on alphabetical order. 

```{r}
#| eval: false

count_top <- function(df, var, n = 5) {
  df |>
    mutate({{ var }} := fct_infreq(fct_lump({{ var }}, n = n))) |>
    group_by({{ var }}) |>
    summarise(n = as.integer(sum(weight)))
}

prod_codes <- setNames(products$prod_code, products$title)

ui <- fluidPage(
  fluidRow(
    column(8,
      selectInput("code", "Product",
        choices = setNames(products$prod_code, products$title),
        width = "100%"
      )
    ),
    column(2, selectInput("metric", "Y axis", c("rate", "count")))
  ),
  fluidRow(
    column(4, tableOutput("diag_tb")),
    column(4, tableOutput("body_part_tb")),
    column(4, tableOutput("location_tb"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex_plot"))
  )
)

server <- function(input, output, session) {
  
  injuries_selected <- reactive({
    injuries |> filter(prod_code == input$code)
  })
  
  output$diag_tb <- renderTable(
    count_top(injuries_selected(), diag),
    width = "100%"
  )
  
  output$body_part_tb <- renderTable(
    count_top(injuries_selected(), body_part),
    width = "100%"
  )
  
  output$location_tb <- renderTable(
    count_top(injuries_selected(), location),
    width = "100%"
  )
  
  # Now if the we change from count to rate
  # shiny doesn't need to update this part
  # just to update the plot
  age_sex_summary <- reactive({
    injuries_selected() |>
      count(age, sex, wt = weight, sort = TRUE) |>
      left_join(population, by = c("age", "sex")) |>
      mutate(rate = n / population * 1e4)
  })
  
  
  output$age_sex_plot <- renderPlot({
    if (input$metric == "count") {
      age_sex_summary() |>
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries")
    } else {
      age_sex_summary() |>
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people")
    }
  }, res = 96)
    
}

shinyApp(ui, server)
```

![](img/05-changing-fct_infreq-fct_lump.png)

3. Add an input control that lets the user decide how many rows to show in the summary tables.


```{r}
#| eval: false

count_top <- function(df, var, n = 5) {
  df |>
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) |>
    group_by({{ var }}) |>
    summarise(n = as.integer(sum(weight)))
}

prod_codes <- setNames(products$prod_code, products$title)

ui <- fluidPage(
  fluidRow(
    column(8,
      selectInput("code", "Product",
        choices = setNames(products$prod_code, products$title),
        width = "100%"
      )
    ),
    column(2, selectInput("metric", "Y axis", c("rate", "count"))),
    column(2, numericInput("n_rows", "Rows to display", 5L))
  ),
  fluidRow(
    column(4, tableOutput("diag_tb")),
    column(4, tableOutput("body_part_tb")),
    column(4, tableOutput("location_tb"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex_plot"))
  ),
  fluidRow(
    column(2, actionButton("story", "Tell me a story")),
    column(10, textOutput("narrative"))
  )
)

server <- function(input, output, session) {
  
  injuries_selected <- reactive({
    injuries |> filter(prod_code == input$code)
  })
  
  output$diag_tb <- renderTable(
    count_top(injuries_selected(), diag, input$n_rows),
    width = "100%"
  )
  
  output$body_part_tb <- renderTable(
    count_top(injuries_selected(), body_part, input$n_rows),
    width = "100%"
  )
  
  output$location_tb <- renderTable(
    count_top(injuries_selected(), location, input$n_rows),
    width = "100%"
  )
  
  # Now if the we change from count to rate
  # shiny doesn't need to update this part
  # just to update the plot
  age_sex_summary <- reactive({
    injuries_selected() |>
      count(age, sex, wt = weight, sort = TRUE) |>
      left_join(population, by = c("age", "sex")) |>
      mutate(rate = n / population * 1e4)
  })
  
  
  output$age_sex_plot <- renderPlot({
    if (input$metric == "count") {
      age_sex_summary() |>
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries")
    } else {
      age_sex_summary() |>
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people")
    }
  }, res = 96)
  
  
  narrative_sample <- eventReactive(
    # Re-evaluated whenever either input$story or selected() changes
    list(input$story, injuries_selected()),
    # Text to show
    injuries_selected() |> pull(narrative) |> sample(1)
  )
  
  output$narrative <- renderText(narrative_sample())
    
}

shinyApp(ui, server)
```

![](img/06-display-n-rows.png)

4. Provide a way to step through every narrative systematically with forward and backward buttons.

```{r}
#| eval: false

count_top <- function(df, var, n = 5) {
  df |>
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) |>
    group_by({{ var }}) |>
    summarise(n = as.integer(sum(weight)))
}

prod_codes <- setNames(products$prod_code, products$title)

ui <- fluidPage(
  fluidRow(
    column(8,
      selectInput("code", "Product",
        choices = setNames(products$prod_code, products$title),
        width = "100%"
      )
    ),
    column(2, selectInput("metric", "Y axis", c("rate", "count"))),
    column(2, numericInput("n_rows", "Rows to display", 5L))
  ),
  fluidRow(
    column(4, tableOutput("diag_tb")),
    column(4, tableOutput("body_part_tb")),
    column(4, tableOutput("location_tb"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex_plot"))
  ),
  fluidRow(
    column(2, actionButton("backward", "Backward")),
    column(2, actionButton("forward", "Forward")),
    column(8, textOutput("narrative"))
  )
)

server <- function(input, output, session) {
  
  injuries_selected <- reactive({
    injuries |> filter(prod_code == input$code)
  })
  
  output$diag_tb <- renderTable(
    count_top(injuries_selected(), diag, input$n_rows),
    width = "100%"
  )
  
  output$body_part_tb <- renderTable(
    count_top(injuries_selected(), body_part, input$n_rows),
    width = "100%"
  )
  
  output$location_tb <- renderTable(
    count_top(injuries_selected(), location, input$n_rows),
    width = "100%"
  )
  
  # Now if the we change from count to rate
  # shiny doesn't need to update this part
  # just to update the plot
  age_sex_summary <- reactive({
    injuries_selected() |>
      count(age, sex, wt = weight, sort = TRUE) |>
      left_join(population, by = c("age", "sex")) |>
      mutate(rate = n / population * 1e4)
  })
  
  
  output$age_sex_plot <- renderPlot({
    if (input$metric == "count") {
      age_sex_summary() |>
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries")
    } else {
      age_sex_summary() |>
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people")
    }
  }, res = 96)
  
  max_rows <- reactive(injuries_selected() |> nrow())
  
  narrative_step <- reactiveVal(1L)
  
  observeEvent(
    list(input$code, injuries_selected()), 
    narrative_step(1L)
  )
  
  observeEvent(input$backward,{
    x <- narrative_step() - 1L
    x <- if(x < 1) 1L else x
    narrative_step(x)
  })
  
  observeEvent(input$forward,{
    x <- narrative_step() + 1L
    x <- if(x > max_rows()) max_rows() else x
    narrative_step(x)
  })
  
  narrative_sample <- reactive(
    injuries_selected() |> 
      pull(narrative) |>
      (\(x) x[narrative_step()])() |>
      paste0("Narrative ", narrative_step(), ": ", a = _)
  )
  
  output$narrative <- renderText(narrative_sample())
    
}

shinyApp(ui, server)
```

![](img/07-display-narrative.png)

5. Make the list of narratives “circular” so that advancing forward from the last narrative takes you to the first.

```{r}
#| eval: false

count_top <- function(df, var, n = 5) {
  df |>
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) |>
    group_by({{ var }}) |>
    summarise(n = as.integer(sum(weight)))
}

prod_codes <- setNames(products$prod_code, products$title)

ui <- fluidPage(
  fluidRow(
    column(8,
      selectInput("code", "Product",
        choices = setNames(products$prod_code, products$title),
        width = "100%"
      )
    ),
    column(2, selectInput("metric", "Y axis", c("rate", "count"))),
    column(2, numericInput("n_rows", "Rows to display", 5L))
  ),
  fluidRow(
    column(4, tableOutput("diag_tb")),
    column(4, tableOutput("body_part_tb")),
    column(4, tableOutput("location_tb"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex_plot"))
  ),
  fluidRow(
    column(2, actionButton("backward", "Backward")),
    column(2, actionButton("forward", "Forward")),
    column(8, textOutput("narrative"))
  )
)

server <- function(input, output, session) {
  
  injuries_selected <- reactive({
    injuries |> filter(prod_code == input$code)
  })
  
  output$diag_tb <- renderTable(
    count_top(injuries_selected(), diag, input$n_rows),
    width = "100%"
  )
  
  output$body_part_tb <- renderTable(
    count_top(injuries_selected(), body_part, input$n_rows),
    width = "100%"
  )
  
  output$location_tb <- renderTable(
    count_top(injuries_selected(), location, input$n_rows),
    width = "100%"
  )
  
  # Now if the we change from count to rate
  # shiny doesn't need to update this part
  # just to update the plot
  age_sex_summary <- reactive({
    injuries_selected() |>
      count(age, sex, wt = weight, sort = TRUE) |>
      left_join(population, by = c("age", "sex")) |>
      mutate(rate = n / population * 1e4)
  })
  
  
  output$age_sex_plot <- renderPlot({
    if (input$metric == "count") {
      age_sex_summary() |>
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries")
    } else {
      age_sex_summary() |>
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people")
    }
  }, res = 96)
  
  max_rows <- reactive(injuries_selected() |> nrow())
  
  narrative_step <- reactiveVal(1L)
  
  observeEvent(
    list(input$code, injuries_selected()), 
    narrative_step(1L)
  )
  
  observeEvent(input$backward,{
    x <- narrative_step() - 1L
    x <- if(x < 1) max_rows() else x
    narrative_step(x)
  })
  
  observeEvent(input$forward,{
    x <- narrative_step() + 1L
    x <- if(x > max_rows()) 1L else x
    narrative_step(x)
  })
  
  narrative_sample <- reactive(
    injuries_selected() |> 
      pull(narrative) |>
      (\(x) x[narrative_step()])() |>
      paste0("Narrative ", narrative_step(), ": ", a = _)
  )
  
  output$narrative <- renderText(narrative_sample())
    
}

shinyApp(ui, server)
```

![](img/08-display-circular-narrative.png)
